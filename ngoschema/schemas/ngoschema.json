{
  "$id": "https://numengo.org/ngoschema#",
  "type": "object",
  "$comment": "automatically generated for ngoschema",
  "$defs": {
    "contexts": {
      "type": "object",
      "description": "The context is initialized at the instance creation and defines the environment of the object. Contexts can give access to Namespace Manager, parent objects or instances",
      "$defs": {
        "NsManagerContext": {
          "type": "object",
          "notSerialized": [
            "_nsMgr"
          ],
          "notValidated": [
            "_nsMgr"
          ],
          "properties": {
            "_nsMgr": true
          }
        },
        "ObjectProtocolContext": {
          "type": "object",
          "extends": [
            "#/$defs/contexts/$defs/NsManagerContext"
          ],
          "notSerialized": [
            "_parent"
          ],
          "notValidated": [
            "_parent"
          ],
          "properties": {
            "_parent": true
          }
        },
        "InstanceContext": {
          "type": "object",
          "extends": [
            "#/$defs/contexts/$defs/ObjectProtocolContext"
          ],
          "notSerialized": [
            "_parentInstance"
          ],
          "notValidated": [
            "_parentInstance"
          ],
          "properties": {
            "_parentInstance": true
          }
        }
      }
    },
    "metadata": {
      "type": "object",
      "$defs": {
        "Annotation": {
          "type": "object",
          "description": "Basic annotations",
          "properties": {
            "title": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "long_description": {
              "type": "array"
            },
            "$comment": {
              "type": "string"
            }
          }
        },
        "Name": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            }
          }
        },
        "Id": {
          "type": "object",
          "properties": {
            "$id": {
              "type": "id"
            },
            "$schema": {
              "type": "id"
            }
          }
        },
        "Taggable": {
          "type": "object",
          "extends": [
            "#/$defs/metadata/$defs/Annotation"
          ],
          "properties": {
            "tags": {
              "type": "array"
            }
          }
        },
        "Plural": {
          "type": "object",
          "properties": {
            "namePlural": {
              "type": "string",
              "default": "{%if this.name %}{{this.name|pluralize}}{% endif %}"
            }
          }
        },
        "Timestamp": {
          "type": "object",
          "abstract": true,
          "properties": {
            "dateCreated": {
              "type": "datetime"
            },
            "dateModified": {
              "type": "datetime"
            }
          }
        }
      }
    },
    "protocols": {
      "type": "object",
      "$defs": {
        "Context": {
          "type": "object",
          "description": "Protocol for context management"
        },
        "Checker": {
          "type": "object",
          "description": "Type checking interface",
          "properties": {
            "pyType": {
              "type": "importable"
            }
          }
        },
        "Converter": {
          "type": "object",
          "description": "Type conversion interface",
          "extends": [
            "#/$defs/protocols/$defs/Checker"
          ],
          "properties": {
            "checker": {
              "$ref": "#/$defs/protocols/$defs/Checker"
            }
          }
        },
        "Transformer": {
          "type": "object",
          "description": "Type transformation interface",
          "extends": [
            "#/$defs/protocols/$defs/Converter"
          ],
          "aliases": {
            "fromClass": "pyType"
          },
          "properties": {
            "converter": {
              "$ref": "#/$defs/protocols/$defs/Converter"
            },
            "toClass": {
              "type": "importable"
            }
          }
        },
        "Validator": {
          "type": "object",
          "description": "Validator interface",
          "extends": [
            "#/$defs/protocols/$defs/Converter"
          ],
          "properties": {
            "schema": {
              "type": "string"
            },
            "errors": {
              "type": "object"
            },
            "converter": {
              "$ref": "#/$defs/protocols/$defs/Converter"
            }
          }
        },
        "Deserializer": {
          "type": "object",
          "description": "Deserialization interface: how input data is preprocessed when loading.",
          "extends": [
            "#/$defs/protocols/$defs/Validator"
          ],
          "properties": {
            "many": {
              "type": "boolean"
            },
            "validator": {
              "$ref": "#/$defs/protocols/$defs/Validator"
            }
          }
        },
        "Serializer": {
          "type": "object",
          "description": "Serialization interface: how object data is printed or saved",
          "extends": [
            "#/$defs/protocols/$defs/Deserializer"
          ],
          "properties": {
            "deserializer": {
              "$ref": "#/$defs/protocols/$defs/Deserializer"
            }
          }
        },
        "Loader": {
          "type": "object",
          "description": "Loading interface: How data is loaded to memory. It can be from a file, a database",
          "extends": [
            "#/$defs/protocols/$defs/Deserializer"
          ],
          "aliases": {
            "instance_class": "instanceClass"
          },
          "properties": {
            "instanceClass": {
              "type": "importable"
            },
            "deserializer": {
              "$ref": "#/$defs/protocols/$defs/Deserializer"
            }
          }
        },
        "Resolver": {
          "type": "object",
          "extends": [
            "#/$defs/protocols/$defs/Converter"
          ],
          "properties": {
            "converter": {
              "$ref": "#/$defs/protocols/$defs/Converter"
            }
          }
        },
        "Saver": {
          "type": "object",
          "description": "Saving interface: How data is saved persistently. It can be a file, a database.",
          "extends": [
            "#/$defs/protocols/$defs/Loader"
          ],
          "properties": {
            "serializer": {
              "$ref": "#/$defs/protocols/$defs/Serializer"
            },
            "loader": {
              "$ref": "#/$defs/protocols/$defs/Loader"
            }
          }
        },
        "Repository": {
          "type": "object",
          "description": "Repository interface: How entities are handled in memory and/or saved persistently. It can be in memory, in a file, a database. Repositories store entities of a same family.",
          "extends": [
            "#/$defs/protocols/$defs/Saver"
          ],
          "properties": {
            "many": {
              "type": "boolean",
              "default": true
            },
            "content": true,
            "saver": {
              "$ref": "#/$defs/protocols/$defs/Saver"
            }
          }
        }
      }
    },
    "relationships": {
      "type": "object",
      "$defs": {
        "RelationshipBase": {
          "type": "object",
          "description": "This objet represents the relationship between one and one/many other objects",
          "dependencies": {
            "foreignClass": [
              "foreignSchema"
            ],
            "foreignKeys": [
              "foreignClass"
            ]
          },
          "notSerialized": [
            "foreignClass"
          ],
          "readOnly": [
            "foreignClass"
          ],
          "properties": {
            "foreignSchema": {
              "type": "id",
              "description": "Foreign object schema id"
            },
            "foreignClass": {
              "type": "importable",
              "description": "Foreign object symbol"
            },
            "foreignKeys": {
              "type": "array",
              "description": "Foreign keys to index objects",
              "items": {
                "type": "string"
              }
            },
            "cardinality": {
              "type": "string",
              "description": "Relationship cardinality.",
              "enum": [
                "one2one",
                "one2many"
              ]
            },
            "ordering": {
              "type": "array",
              "description": "list of objects keys to use for ordering",
              "items": {
                "type": "string"
              }
            },
            "reverse": {
              "type": "boolean",
              "description": "True, if order is reversed"
            },
            "inheritance": {
              "type": "boolean",
              "description": "True, if inheritance relationship"
            }
          }
        },
        "Relationship": {
          "type": "object",
          "extends": [
            "#/$defs/relationships/$defs/RelationshipBase",
            "#/$defs/metadata/$defs/Name"
          ]
        },
        "ForeignKey": {
          "type": "object",
          "description": "This object allow to point an object stored in a repository from a foreign key, and to associate it to the current object",
          "extends": [
            "#/$defs/relationships/$defs/RelationshipBase"
          ],
          "additionalProperties": false,
          "properties": {
            "backPopulates": {
              "$ref": "#/$defs/relationships/$defs/Relationship"
            },
            "onDelete": {
              "type": "string",
              "description": "Behavior on object deletion",
              "enum": [
                "CASCADE",
                "PROTECT",
                "SET_NULL",
                "SET_DEFAULT",
                "SET",
                "DO_NOTHING"
              ]
            }
          }
        }
      }
    },
    "instances": {
      "type": "object",
      "$defs": {
        "Instance": {
          "type": "object",
          "title": "Named Object",
          "description": "Instance abstract class. An instance is named and can be part of another instance and is referred by its canonical name.",
          "extends": [
            "#/$defs/contexts/$defs/InstanceContext",
            "#/$defs/metadata/$defs/Name",
            "#/$defs/metadata/$defs/Annotation"
          ],
          "abstract": true,
          "additionalProperties": false,
          "notSerialized": [
            "canonicalName"
          ],
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "type": "string",
              "description": "Instance's name"
            },
            "canonicalName": {
              "type": "string",
              "description": "Instance's canonical name, depends on parents."
            },
            "properties": {
              "type": "array",
              "description": "Instance's properties",
              "items": {
                "$ref": "#/$defs/instances/$defs/Instance"
              }
            }
          }
        },
        "Entity": {
          "type": "object",
          "description": "Entities are important object usually stored in databases, and indexed using a primary key that identify the object by its identity keys.",
          "extends": [
            "#/$defs/instances/$defs/Instance",
            "#/$defs/metadata/$defs/Id"
          ],
          "abstract": true,
          "additionalProperties": false,
          "dependencies": {},
          "notSerialized": [
            "identityKeys",
            "primaryKeys",
            "$schema",
            "$id"
          ],
          "readOnly": [
            "identityKeys"
          ],
          "properties": {
            "primaryKeys": {
              "type": "array",
              "description": "Keys to be used as primary keys to index this class of entities.",
              "items": {
                "type": "string"
              }
            },
            "identityKeys": {
              "type": "array",
              "description": "Primary keys values in object, used to identify it."
            }
          }
        }
      }
    },
    "datasets": {
      "type": "object",
      "$defs": {
        "Series": {
          "type": "object",
          "extends": [
            "#/$defs/instances/$defs/Instance"
          ],
          "wraps": "pandas.core.series.Series",
          "properties": {
            "data": true,
            "index": {
              "type": "array"
            },
            "dtypes": {
              "type": "array"
            }
          }
        },
        "Dataframe": {
          "type": "object",
          "extends": [
            "#/$defs/datasets/$defs/Series"
          ],
          "wraps": "pandas.core.frame.DataFrame",
          "properties": {
            "data": true,
            "index": {
              "type": "array"
            },
            "columns": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/datasets/$defs/Series"
              }
            },
            "dtypes": {
              "type": "array"
            }
          }
        },
        "HasDataframe": {
          "type": "object",
          "abstract": true,
          "aliases": {
            "df": "dataframe"
          },
          "notSerialized": [
            "dataframe"
          ],
          "properties": {
            "dataframe": {
              "$ref": "#/$defs/datasets/$defs/Dataframe"
            }
          }
        },
        "HasSeries": {
          "type": "object",
          "abstract": true,
          "notSerialized": [
            "series",
            "index"
          ],
          "properties": {
            "series": {
              "$ref": "#/$defs/datasets/$defs/Series"
            },
            "index": {
              "type": "array",
              "asString": true,
              "items": {
                "type": "string"
              }
            }
          }
        },
        "DataframeSubset": {
          "type": "object",
          "extends": [
            "#/$defs/datasets/$defs/HasDataframe"
          ],
          "readOnly": [
            "subset"
          ],
          "required": [
            "dataframe",
            "subkeys"
          ],
          "properties": {
            "subkeys": {
              "type": "array"
            },
            "ids": {
              "type": "array"
            },
            "subset": {
              "$ref": "#/$defs/datasets/$defs/Dataframe"
            }
          }
        }
      }
    },
    "files": {
      "type": "object",
      "$defs": {
        "Filepath": {
          "type": "object",
          "extends": [
            "#/$defs/metadata/$defs/Timestamp"
          ],
          "readOnly": [
            "dateCreated",
            "dateModified"
          ],
          "required": [
            "filepath"
          ],
          "properties": {
            "filepath": {
              "type": "path"
            },
            "dateCreated": {
              "type": "datetime"
            },
            "dateModified": {
              "type": "datetime"
            }
          }
        },
        "File": {
          "type": "object",
          "description": "This object represents a file.",
          "extends": [
            "#/$defs/files/$defs/Filepath"
          ],
          "properties": {
            "binary": {
              "type": "boolean",
              "description": "True, if binary file"
            },
            "contentRaw": true
          }
        },
        "Folder": {
          "type": "object",
          "extends": [
            "#/$defs/files/$defs/Filepath"
          ],
          "notSerialized": [
            "parent"
          ],
          "notValidated": [
            "parent"
          ],
          "readOnly": [
            "parent"
          ],
          "properties": {
            "files": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/files/$defs/File"
              }
            },
            "subfolders": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/files/$defs/Folder"
              }
            },
            "parent": {
              "$ref": "#/$defs/files/$defs/Folder"
            }
          }
        },
        "ZipFile": {
          "type": "object",
          "extends": [
            "#/$defs/files/$defs/File"
          ]
        },
        "UriFile": {
          "type": "object",
          "description": "This object represents a file referenced by a URI",
          "extends": [
            "#/$defs/files/$defs/File"
          ],
          "dependencies": {
            "uri": [
              "filepath"
            ]
          },
          "properties": {
            "uri": {
              "type": "uri",
              "description": "File Uri."
            },
            "contentRaw": true
          }
        },
        "Document": {
          "type": "object",
          "description": "This object represents a document.",
          "extends": [
            "#/$defs/files/$defs/UriFile",
            "#/$defs/metadata/$defs/Taggable"
          ],
          "additionalProperties": false,
          "dependencies": {
            "content": [
              "contentRaw"
            ]
          },
          "properties": {
            "encoder": {
              "$ref": "#/$defs/serializers/$defs/JsonSerializer"
            },
            "charset": {
              "type": "string",
              "description": "Character set",
              "default": "utf-8"
            },
            "version": {
              "type": "string",
              "description": "Document version"
            },
            "author": {
              "type": "string",
              "description": "Document author"
            },
            "content": true
          }
        }
      }
    },
    "serializers": {
      "type": "object",
      "description": "Serializers implements the interface that formats objects in a string (for ex json, xml or yaml).",
      "$defs": {
        "CollectionSerializer": {
          "type": "object",
          "description": "This represents a serializer for a collection.",
          "properties": {
            "many": {
              "type": "boolean",
              "description": "True, if serializer can serialize several objects at once."
            },
            "excludes": {
              "type": "array",
              "description": "Keys to exclude from serialization"
            },
            "only": {
              "type": "array",
              "description": "Keys to keep only during serialization"
            }
          }
        },
        "ObjectSerializer": {
          "type": "object",
          "description": "This represents a serializer for an object.",
          "extends": [
            "#/$defs/serializers/$defs/CollectionSerializer"
          ],
          "properties": {
            "attrPrefix": {
              "type": "string",
              "description": "Prefix used for simple primitive attributes."
            },
            "noDefaults": {
              "type": "boolean",
              "description": "True, if only non default value are serialized."
            },
            "noReadOnly": {
              "type": "boolean",
              "description": "True, if read-only attributes should not be serialized."
            }
          }
        },
        "InstanceSerializer": {
          "type": "object",
          "description": "This represents a serializer for an instance.",
          "extends": [
            "#/$defs/serializers/$defs/ObjectSerializer"
          ],
          "notSerialized": [
            "tag",
            "elements_tag"
          ],
          "properties": {
            "instanceClass": {
              "type": "importable",
              "description": "Class symbol of objects stored in repository"
            },
            "tag": {
              "type": "string",
              "description": "Tag to use to represent root object in serialization."
            },
            "elements_tag": {
              "type": "string",
              "description": "Tag used to represent each elements if many"
            }
          }
        },
        "EntitySerializer": {
          "type": "object",
          "description": "This represents a serializer for an entity.",
          "extends": [
            "#/$defs/serializers/$defs/InstanceSerializer"
          ],
          "properties": {
            "useIdentityKeys": {
              "type": "boolean",
              "description": "True, if entities are referenced using their identity keys."
            },
            "useEntityKeys": {
              "type": "boolean",
              "description": "True, if entities are serialized as a dict with the primary key"
            }
          }
        },
        "FileSerializer": {
          "type": "object",
          "description": "This represents a (de)serializer to/from a file.",
          "extends": [
            "#/$defs/protocols/$defs/Serializer"
          ],
          "properties": {
            "filepath": {
              "type": "path",
              "description": "File path"
            },
            "binary": {
              "type": "boolean",
              "description": "True, if binary file"
            },
            "charset": {
              "type": "string",
              "default": "utf-8"
            }
          }
        },
        "JsonSerializer": {
          "type": "object",
          "description": "This represents a json (de)serializer.",
          "extends": [
            "#/$defs/serializers/$defs/InstanceSerializer"
          ]
        },
        "XmlSerializer": {
          "type": "object",
          "description": "This represents a xml (de)serializer.",
          "extends": [
            "#/$defs/serializers/$defs/InstanceSerializer"
          ],
          "properties": {
            "attr_prefix": {
              "type": "string",
              "description": "Prefix used for simple primitive attributes (usually '@').",
              "default": "@"
            },
            "pretty": {
              "type": "boolean",
              "description": "True, if serialization is indented",
              "default": true
            },
            "cdata_key": {
              "type": "string",
              "description": "Key used for cdata in xml (usually '#text')",
              "default": "#text"
            },
            "short_empty_elements": {
              "type": "boolean",
              "description": "True, if empty elements are excluded",
              "default": true
            },
            "indent": {
              "type": "string",
              "description": "Indentation string",
              "default": "\t"
            },
            "newl": {
              "type": "string",
              "description": "New line string",
              "default": "\n"
            }
          }
        },
        "YamlSerializer": {
          "type": "object",
          "description": "This represents a yaml (de)serializer.",
          "extends": [
            "#/$defs/serializers/$defs/InstanceSerializer"
          ]
        },
        "CsvSerializer": {
          "type": "object",
          "extends": [
            "#/$defs/serializers/$defs/InstanceSerializer"
          ],
          "properties": {
            "dialect": {
              "type": "string"
            },
            "delimiter": {
              "type": "string"
            },
            "delim_whitespace": {
              "type": "string"
            },
            "engine": {
              "type": "string"
            },
            "sep": {
              "type": "string"
            },
            "error_bad_lines": {
              "type": "string"
            },
            "warn_bad_lines": {
              "type": "string"
            },
            "on_bad_lines": {
              "type": "string"
            },
            "names": {
              "type": "string"
            },
            "prefix": {
              "type": "string"
            }
          }
        }
      }
    },
    "repositories": {
      "type": "object",
      "description": "Repositories are containers of objects, loading, holding and serializing the instances.",
      "$defs": {
        "MemoryRepository": {
          "type": "object",
          "description": "This represents a repository storing objects in memory.",
          "extends": [
            "#/$defs/protocols/$defs/Repository"
          ],
          "additionalProperties": false,
          "aliases": {
            "instances": "content"
          },
          "dependencies": {
            "index": [
              "content"
            ]
          },
          "readOnly": [
            "content",
            "index"
          ],
          "properties": {
            "content": {
              "type": "array"
            },
            "index": {
              "type": "array"
            }
          }
        },
        "DataframeRepository": {
          "type": "object",
          "extends": [
            "#/$defs/repositories/$defs/MemoryRepository",
            "#/$defs/datasets/$defs/HasDataframe"
          ],
          "aliases": {
            "dataframe": "content",
            "rowClass": "instanceClass"
          },
          "properties": {
            "content": {
              "$ref": "#/$defs/datasets/$defs/Dataframe"
            }
          }
        },
        "FileRepository": {
          "type": "object",
          "description": "This represents a repository storing objects in files.",
          "extends": [
            "#/$defs/repositories/$defs/MemoryRepository",
            "#/$defs/serializers/$defs/FileSerializer"
          ],
          "additionalProperties": false,
          "properties": {
            "overwrite": {
              "type": "boolean",
              "description": "True, if overwriting file is permitted."
            }
          }
        },
        "JsonFileRepository": {
          "type": "object",
          "description": "This represents a repository storing objects in json files.",
          "extends": [
            "#/$defs/repositories/$defs/FileRepository",
            "#/$defs/serializers/$defs/JsonSerializer"
          ]
        },
        "YamlFileRepository": {
          "type": "object",
          "description": "This represents a repository storing objects in yaml files.",
          "extends": [
            "#/$defs/repositories/$defs/FileRepository",
            "#/$defs/serializers/$defs/YamlSerializer"
          ],
          "additionalProperties": true
        },
        "XmlFileRepository": {
          "type": "object",
          "description": "This represents a repository storing objects in xml files.",
          "extends": [
            "#/$defs/repositories/$defs/FileRepository",
            "#/$defs/serializers/$defs/XmlSerializer"
          ],
          "additionalProperties": true,
          "properties": {
            "postprocessor": {
              "type": "importable",
              "description": "Class symbol of postprocessor"
            }
          }
        },
        "CsvFileRepository": {
          "type": "object",
          "description": "This represents a repository storing objects in xml files.",
          "extends": [
            "#/$defs/repositories/$defs/DataframeRepository",
            "#/$defs/serializers/$defs/CsvSerializer"
          ],
          "properties": {
            "filepath": {
              "type": "path"
            },
            "doc": {
              "type": "path"
            },
            "fieldnames": {
              "type": "array",
              "description": "list of keys for the dict"
            },
            "restkey": {
              "type": "string",
              "description": "key to catch long rows"
            },
            "restval": {
              "type": "string",
              "description": "default value for short rows"
            },
            "dataframe": {
              "$ref": "#/$defs/datasets/$defs/Dataframe"
            }
          }
        }
      }
    },
    "queries": {
      "type": "object",
      "$defs": {
        "Filter": {
          "type": "object",
          "description": "This object represents a filter for a query set.",
          "additionalProperties": true,
          "properties": {
            "attrs": {
              "type": "array",
              "description": "List of attributes that objects should have defined.",
              "items": true
            },
            "attrs_value": {
              "type": "object",
              "description": "Set of key/value to filter query set."
            },
            "negate": {
              "type": "boolean",
              "description": "True, if negate condition."
            },
            "any_of": {
              "type": "boolean",
              "description": "True, if any of the filter conditions is enough."
            }
          }
        },
        "Query": {
          "type": "object",
          "description": "This object represents a query",
          "extends": [
            "#/$defs/queries/$defs/Filter"
          ],
          "notSerialized": [
            "iterable"
          ],
          "notValidated": [
            "iterable"
          ],
          "readOnly": [
            "result"
          ],
          "properties": {
            "iterable": {
              "type": "array",
              "description": "Iterable to filter."
            },
            "distinct": {
              "type": "boolean",
              "description": "True, if only distinct objects are returned."
            },
            "order_by": true,
            "reverse": {
              "type": "boolean",
              "description": "True, if order is reversed"
            },
            "result": {
              "type": "array",
              "description": "Filtered items"
            }
          }
        }
      }
    },
    "session": {
      "type": "object",
      "$defs": {
        "Session": {
          "type": "object",
          "description": "This object represents a session, and binds all repositories in the scope of the application.",
          "additionalProperties": false,
          "properties": {
            "autoflush": {
              "type": "boolean",
              "default": true
            },
            "expire_on_commit": {
              "type": "boolean",
              "default": true
            },
            "autocommit": {
              "type": "boolean",
              "default": true
            },
            "bind": {
              "type": "object",
              "additionalProperties": true
            },
            "repositories": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/protocols/$defs/Repository"
              }
            }
          }
        }
      }
    }
  }
}